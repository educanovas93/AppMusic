package tds.um.modelo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import tds.um.persistencia.DAOException;
import tds.um.persistencia.FactoriaDAO;
import tds.um.persistencia.IAdaptadorCancionDAO;
import tds.um.persistencia.IAdaptadorUsuarioDAO;

public class CatalogoCanciones {

	/*
	 * Tenemos que crear dos metodos: 1ยบ Devuelva una lista con las canciones de un
	 * interprete. 2ยบ Devuelva una lista con las cancions de un estilo musical
	 */

	// Mapa con unico usuario
	private Map<String, Cancion> canciones;
	private static CatalogoCanciones unicaInstancia = new CatalogoCanciones();

	private FactoriaDAO factoriaDao;
	private IAdaptadorCancionDAO adapatadorCancion;

	// Constructor de clase sin parametro
	private CatalogoCanciones() {
		try {
			factoriaDao = FactoriaDAO.getInstancia(FactoriaDAO.DAO_TDS);
			adapatadorCancion = factoriaDao.getCancionDAO();
			canciones = new HashMap<String, Cancion>();
			this.cargarCatalogo();
		} catch (DAOException eDAO) {
			eDAO.printStackTrace();
		}
	}

	// Metodo get del Catalogo
	public static CatalogoCanciones getCatalogoCanciones() {
		return unicaInstancia;
	}

	// Devuelve todos las canciones
	public List<Cancion> getCanciones() {
		ArrayList<Cancion> lista = new ArrayList<Cancion>();
		for (Cancion cancion : canciones.values()) {
			lista.add(cancion);
		}
		return lista;
	}

	// Devuelve una cancion en particular
	public Cancion getCancion(int codigo) {
		for (Cancion cancion : canciones.values()) {
			if (cancion.getId() == codigo)
				return cancion;
		}
		return null;
	}

	// Devuelve las canciones filtradas por estiloMusical
	public List<Cancion> getCancionEstiloMusical(String estiloMusical) {
		LinkedList<Cancion> lista = new LinkedList<Cancion>();
		for (Cancion cancion : canciones.values()) {
			/*
			 * Funcion en cancion List<EstilosMusicales> getEstilosMusicales(); Nos devuelve
			 * todos los estilos musicales
			 */
			if (cancion.getEstiloMusical().equals(estiloMusical))
				lista.add(cancion);

		}
		return lista;
	}

	// Devuelve las canciones filtradas por interprete
	public List<Cancion> getCancionInterprete(Interprete interprete) {
		LinkedList<Cancion> lista = new LinkedList<Cancion>();
		for (Cancion cancion : canciones.values()) {
			if (cancion.getInterprete().equals(interprete))
				lista.add(cancion);
		}
		return lista;
	}
	
	// Devuelve las canciones mas recientemente reproducidas
	// TODO

	// Recupera todos los clientes para trabajar con ellos en memoria
	private void cargarCatalogo() throws DAOException {
		List<Cancion> cancionBD = adapatadorCancion.recuperarTodasCanciones();
		for (Cancion cancion : cancionBD)
			canciones.put(cancion.getTitulo(), cancion);
	}

}
